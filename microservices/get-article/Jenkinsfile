pipeline{
  agent any
  environment {
    AWS_ACCESS_KEY_ID          = credentials('aws_access_key_id')
    AWS_SECRET_ACCESS_KEY      = credentials('aws_secret_access_key')
    AWS_ACCOUNT_ID             = credentials('aws_account_id')

    PROJECT_NAME               = "article"
    RESOURCE_NAME              = "article"
    MS_NAME                    = "get-article"
    HTTP_METHOD                = "GET"
    
    TF_VAR_project_name        = "${PROJECT_NAME}"
    TF_VAR_resource_name       = "${RESOURCE_NAME}"
    TF_VAR_ms_name             = "${MS_NAME}"
    TF_VAR_http_method         = "${HTTP_METHOD}"
    TF_VAR_image_tag           = "${env.BUILD_NUMBER}"
  }
  tools {
    terraform 'TerraformDefault'
  }
  options {
    ansiColor('xterm')
  }
  stages{
    stage('Gather Files'){
      steps{
        sh "rsync -av model/ microservices/${MS_NAME}/model"
      }
    }
    stage('Compile'){
      
      // when { 
      //   anyOf{
      //     changeset "microservices/get-article/src/**"
      //     changeset "microservices/get-article/package.json"
      //     changeset "microservices/get-article/package-lock.json"
      //     changeset "model/**"
      //   }
      // }
      agent {
        docker {
          image 'node:14-buster'
          reuseNode true
        }
      }
      steps{
        dir("microservices/${MS_NAME}/dist"){}
        dir("microservices/${MS_NAME}/"){
          sh 'npm install'
          sh 'npm run build'
          stash includes: 'dist/**/*', name: 'distJs'
          sh 'ls'
        }
      }
    }
    stage('Build Image'){
      // when { 
      //   anyOf{
      //     changeset "microservices/get-article/src/**"
      //     changeset "microservices/get-article/package.json"
      //     changeset "microservices/get-article/package-lock.json"
      //     changeset "model/**"
      //   }
      // }
      steps{
        sh 'ls -al'
        dir("microservices/${MS_NAME}/dist"){
          unstash 'distJs'
        }
        dir("microservices/${MS_NAME}/"){
          script{
            image = docker.build("${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${MS_NAME}:${TF_VAR_tag}")
          }
        }
      }
    }
    stage('Push Image'){
      // when { 
      //   anyOf{
      //     changeset "microservices/get-article/src/**"
      //     changeset "microservices/get-article/package.json"
      //     changeset "microservices/get-article/package-lock.json"
      //     changeset "model/**"
      //   }
      // }
      steps{
        script{
          docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com", "ecr:us-east-1:aws_credentials") {
            image.push()
          }
        }
      }
    }
    stage('Deploy'){
      // when { changeset "microservices/get-article/iac/**"}
      steps{
        dir("microservices/${MS_NAME}/iac"){
          sh 'terraform init -input=false'
          sh 'terraform plan -out=tfplan -input=false'
          sh 'terraform apply -input=false -auto-approve tfplan'
        }
        sh 'rm -rf dist/' 
      }
    }
  }
}